{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# xray demo at NANOOS DMAC meeting in Portland\n",
    "11/13/2015. My first real tests with xray. Used env \"dmac_cmop_nov15\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import xray"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/usr/mayorgadat/workmain/APL/NVS/LongTimeSeries/CraigExmplCF1_6ncfile\n"
     ]
    }
   ],
   "source": [
    "cd '/home/mayorga/Desktop/LongTimeSeries/CraigExmplCF1_6ncfile'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "ndbcx = xray.open_dataset('NDBC46050v3.nc')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<xray.Dataset>\n",
      "Dimensions:                (bnds: 2, position: 1, time: 245448)\n",
      "Coordinates:\n",
      "    latitude               float32 44.66\n",
      "    longitude              (position) float32 235.474\n",
      "  * time                   (time) datetime64[ns] 1987-01-01 ...\n",
      "    depth                  (position) float32 -1.0\n",
      "  * bnds                   (bnds) int64 0 1\n",
      "  * position               (position) int64 0\n",
      "Data variables:\n",
      "    station_name           (position) int32 0\n",
      "    time_bnds              (time, bnds) datetime64[ns] 1986-12-31T23:30:00 ...\n",
      "    sea_water_temperature  (time) float64 nan nan nan nan nan nan nan nan ...\n",
      "Attributes:\n",
      "    title: Hourly NDBC 46050 data\n",
      "    publisher_name: Craig Risien\n",
      "    publisher_email: crisien@coas.oregonstate.edu\n",
      "    institution: Oregon State University, College of Earth, Ocean, and Atmospheric Sciences\n",
      "    date_created: 2015-11-13T12:51:22\n",
      "    date_modified: 2015-11-13T12:51:22\n",
      "    history: Quality controlled at NOAA NDBC\n",
      "    time_coverage_start: 1987-01-01T00:00:00\n",
      "    time_coverage_end: 2014-12-31T23:00:00\n",
      "    time_coverage_resolution: hourly averages\n",
      "    geospatial_lat_min: 44.656\n",
      "    geospatial_lat_max: 44.656\n",
      "    geospatial_lat_units: degrees_north\n",
      "    geospatial_lon_min: 235.474\n",
      "    geospatial_lon_max: 235.474\n",
      "    geospatial_lon_units: degrees_east\n",
      "    geospatial_vertical_min: -1.0\n",
      "    geospatial_vertical_max: -1.0\n",
      "    geospatial_vertical_units: meters\n",
      "    geospatial_vertical_resolution: point\n",
      "    geospatial_vertical_positive: up\n",
      "    keywords: sea surface temperature, ndbc, noaa\n",
      "    keyword_vocabulary: GCMD\n",
      "    Conventions: CF-1.6\n",
      "    comments: no comment\n",
      "    cdm_data_type: Station\n",
      "    featureType: timeSeries\n",
      "    data_type: NDBC time-series data\n",
      "    area: North Pacific Ocean\n",
      "    license: Follows NDBC standards. Data available free of charge. User assumes all risk for use of data. User must display citation in any publication or product using data.\n",
      "    citation: These data were collected and made freely available by NOAA NDBC\n",
      "    acknowledgement: These data were collected and made freely available by NOAA NDBC\n",
      "    wmo_platform_code: 46050\n",
      "    summary: Quality controlled NDBC Station data that have been repackaged and distributed by NANOOS\n",
      "    naming_authority: NOAA NDBC\n"
     ]
    }
   ],
   "source": [
    "print(ndbcx)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(245448, u'2014-12-31T23:00:00', u'1987-01-01T00:00:00')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ndbcx.dims['time'], ndbcx.time_coverage_end, ndbcx.time_coverage_start"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[u'title',\n",
       " u'publisher_name',\n",
       " u'publisher_email',\n",
       " u'institution',\n",
       " u'date_created',\n",
       " u'date_modified',\n",
       " u'history',\n",
       " u'time_coverage_start',\n",
       " u'time_coverage_end',\n",
       " u'time_coverage_resolution',\n",
       " u'geospatial_lat_min',\n",
       " u'geospatial_lat_max',\n",
       " u'geospatial_lat_units',\n",
       " u'geospatial_lon_min',\n",
       " u'geospatial_lon_max',\n",
       " u'geospatial_lon_units',\n",
       " u'geospatial_vertical_min',\n",
       " u'geospatial_vertical_max',\n",
       " u'geospatial_vertical_units',\n",
       " u'geospatial_vertical_resolution',\n",
       " u'geospatial_vertical_positive',\n",
       " u'keywords',\n",
       " u'keyword_vocabulary',\n",
       " u'Conventions',\n",
       " u'comments',\n",
       " u'cdm_data_type',\n",
       " u'featureType',\n",
       " u'data_type',\n",
       " u'area',\n",
       " u'license',\n",
       " u'citation',\n",
       " u'acknowledgement',\n",
       " u'wmo_platform_code',\n",
       " u'summary',\n",
       " u'naming_authority']"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ndbcx.attrs.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "245448"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(ndbcx.sea_water_temperature)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<xray.DataArray 'sea_water_temperature' ()>\n",
       "array(188577)\n",
       "Coordinates:\n",
       "    latitude  float64 44.66"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# This must be a count of valid (non-nan) value,\n",
    "# while len() gives counts all values (length of array)\n",
    "ndbcx.sea_water_temperature.count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get and manipulate variable units attribute"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "u'degree_Celsius'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ndbcx.sea_water_temperature.units"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "ndbcx.sea_water_temperature.units = 'Kelvin'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "u'degree_Celsius'"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ndbcx.sea_water_temperature.units"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "ndbcx.sea_water_temperature.attrs['units'] = 'xx'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Notice that in addition to time, only latitude is associated with sea_water_temperature as a coordinate variable. Look into this. Reexamine the nc file, there may be something wrong"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<xray.DataArray 'sea_water_temperature' (time: 245448)>\n",
       "array([ nan,  nan,  nan, ...,  nan,  nan,  nan])\n",
       "Coordinates:\n",
       "  * time      (time) datetime64[ns] 1987-01-01 1987-01-01T01:00:00 ...\n",
       "    latitude  float64 44.66\n",
       "Attributes:\n",
       "    units: xx\n",
       "    cell_methods: time: mean (interval: 1 hour comment: time indicates center hour)\n",
       "    long_name: Hourly Sea Water Temperature\n",
       "    standard_name: sea_water_temperature\n",
       "    sensor_mount: mounted on mooring bridal\n",
       "    valid_min: -2.0\n",
       "    valid_max: 30.0"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ndbcx.sea_water_temperature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "ndbcx.attrs['emilio'] = 'mayorga'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[u'title',\n",
       " u'publisher_name',\n",
       " u'publisher_email',\n",
       " u'institution',\n",
       " u'date_created',\n",
       " u'date_modified',\n",
       " u'history',\n",
       " u'time_coverage_start',\n",
       " u'time_coverage_end',\n",
       " u'time_coverage_resolution',\n",
       " u'geospatial_lat_min',\n",
       " u'geospatial_lat_max',\n",
       " u'geospatial_lat_units',\n",
       " u'geospatial_lon_min',\n",
       " u'geospatial_lon_max',\n",
       " u'geospatial_lon_units',\n",
       " u'geospatial_vertical_min',\n",
       " u'geospatial_vertical_max',\n",
       " u'geospatial_vertical_units',\n",
       " u'geospatial_vertical_resolution',\n",
       " u'geospatial_vertical_positive',\n",
       " u'keywords',\n",
       " u'keyword_vocabulary',\n",
       " u'Conventions',\n",
       " u'comments',\n",
       " u'cdm_data_type',\n",
       " u'featureType',\n",
       " u'data_type',\n",
       " u'area',\n",
       " u'license',\n",
       " u'citation',\n",
       " u'acknowledgement',\n",
       " u'wmo_platform_code',\n",
       " u'summary',\n",
       " u'naming_authority',\n",
       " 'emilio']"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ndbcx.attrs.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Note that since I didn't specy the format or engine parameters,\n",
    "# v3.nc was probably written out as a netcdf4 file (HDF5)\n",
    "ndbcx.to_netcdf('v3.nc')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>latitude</th>\n",
       "      <th>sea_water_temperature</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>time</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1987-01-01 00:00:00</th>\n",
       "      <td>44.655998</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1987-01-01 01:00:00</th>\n",
       "      <td>44.655998</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1987-01-01 02:00:00</th>\n",
       "      <td>44.655998</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1987-01-01 03:00:00</th>\n",
       "      <td>44.655998</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1987-01-01 04:00:00</th>\n",
       "      <td>44.655998</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      latitude  sea_water_temperature\n",
       "time                                                 \n",
       "1987-01-01 00:00:00  44.655998                    NaN\n",
       "1987-01-01 01:00:00  44.655998                    NaN\n",
       "1987-01-01 02:00:00  44.655998                    NaN\n",
       "1987-01-01 03:00:00  44.655998                    NaN\n",
       "1987-01-01 04:00:00  44.655998                    NaN"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "swt_df = ndbcx.sea_water_temperature.to_dataframe()\n",
    "swt_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(Timestamp('1987-01-01 00:00:00'),\n",
       " Timestamp('2014-12-31 23:00:00'),\n",
       " <xray.DataArray 'time' ()>\n",
       " numpy.datetime64('2014-12-31T15:00:00.000000000-0800')\n",
       " Coordinates:\n",
       "     latitude  float64 44.66)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "swt_df.index.min(), swt_df.index.max(), ndbcx.sea_water_temperature.time.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f4dd81c2c50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "ndbcx.sea_water_temperature.to_dataframe()['sea_water_temperature'].plot(figsize=(10,6))\n",
    "ylabel = \"%s (%s)\" % (ndbcx.sea_water_temperature.long_name, \n",
    "                      ndbcx.sea_water_temperature.units)\n",
    "plt.ylabel(ylabel);"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
